// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Gender {
  male
  female
}

model students {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName          String
  surName            String
  otherName          String?
  gender             Gender
  image              String
  fingerPrint        Bytes?
  phone              String
  email              String?
  examsDate          String?
  courses            String[]
  faculty            String
  department         String
  level              String
  assessmentPassword String?
  submitted          String?
  matricNumber       String     @unique
  registrar          String     @db.ObjectId
  registrarRel       registrars @relation(fields: [registrar], references: [id])
  isLoggedin         Boolean?   @default(false)
  isCHM121Done       Boolean?   @default(false)
  isCHM128Done       Boolean?   @default(false)
  score121             Int?
  score128             Int?

  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt()
  AssessmentCourses   AssessmentCourses? @relation(fields: [assessmentCoursesId], references: [id])
  assessmentCoursesId String?            @db.ObjectId
}

model registrars {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     String     @unique
  password String
  students students[]

  updatedAt DateTime @updatedAt()
  createdAt DateTime @default(now())
}

model Assessments {
  id        String              @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  children  AssessmentCourses[]
  startDate DateTime
  endDate   DateTime
  startTime String
  endTime   String
  updatedAt DateTime            @updatedAt()
  createdAt DateTime            @default(now())
}

model AssessmentCourses {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  participants  students[]
  updatedAt     DateTime     @updatedAt()
  createdAt     DateTime     @default(now())
  Assessments   Assessments? @relation(fields: [assessmentsId], references: [id])
  assessmentsId String?      @db.ObjectId
  Questions     Question[]
}

model Question {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  question            String
  options             String[]
  answer              String
  course              AssessmentCourses @relation(fields: [assessmentCoursesId], references: [id])
  assessmentCoursesId String            @db.ObjectId
}
